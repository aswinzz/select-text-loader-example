{"version":3,"sources":["items.js","App.js","serviceWorker.js","index.js"],"names":["things_to_do","App","props","showRandom","setState","selecting","randomIndex","Math","round","random","state","length","setTimeout","className","onClick","this","SelectTextLoader","loading","data","timeGap","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NA+BeA,EA/BO,CACd,0CACA,oBACA,OACA,uCACA,iBACA,gEACA,oEACA,8EACA,oDACA,kCACA,4FACA,2BACA,oBACA,0BACA,oBACA,yDACA,kFACA,wFACA,uCACA,4JACA,sBACA,gFACA,iEACA,uCACA,6CACA,yCACA,QACA,yB,eCaOC,E,kDApCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQRC,WAAa,WACX,EAAKC,SAAS,CAACC,WAAW,IAC1B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,UAAY,EAAKC,MAAMV,aAAaW,OAAS,GAAK,GACtF,EAAKP,SAAS,CAACE,gBACfM,YAAW,kBAAI,EAAKR,SAAS,CAACC,WAAW,MAAQ,MAXjD,EAAKK,MAAQ,CACXV,aAAcA,EACdK,WAAW,EACXC,aAAc,GALA,E,qDAiBhB,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,uBACEA,UAAU,WACVC,QAASC,KAAKZ,YAFhB,yCAMA,2BACIY,KAAKL,MAAML,YAAuC,IAA1BU,KAAKL,MAAMJ,YAAiE,GAAhDS,KAAKL,MAAMV,aAAae,KAAKL,MAAMJ,aACzF,kBAACU,EAAA,EAAD,CAAkBC,QAASF,KAAKL,MAAML,UAAWa,KAAMH,KAAKL,MAAMV,aAAcmB,QAAS,Y,GA7BnFC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.05d6a0fd.chunk.js","sourcesContent":["const things_to_do =  [\n        \"Laugh hystarically for no reason at all\",\n        \"Jump on your bed!\",\n        \"Draw\",\n        \"Dance to music that is epically epic\",\n        \"Teenager Post.\",\n        \"Text/Call your parents and tell them you are up in your room.\",\n        \"Text/Call your best friend and tell them you are up in your room.\",\n        \"Scream out of your window then quickly close the window and hide somewhere.\",\n        \"Play an instrument that you may have VERY LOUDLY!\",\n        \"Cover your floor with clothing!\",\n        \"Sing. Doesn't matter if you can or can not sing. Just sing your little heart out. Loudly.\",\n        \"Watch avengers end game!\",\n        \"Talk to a pillow.\",\n        \"Start a one person riot\",\n        \"Rearrange things.\",\n        \"Create something from random objects around your room.\",\n        \"Throw something out of your window. Then laugh hystarically to someone outside.\",\n        \"Try to find money under your bed, in your closet/dresser. If you do, yell hallelujah!\",\n        \"Just jam out to a song in your head.\",\n        \"Pretend you are on a lake. The floor is your river, the bed is your boat, and a hanger you can find with a belt on it is your fishing hook. Room fishing!\",\n        \"Find Narnia. Again.\",\n        \"Hide under your bed for 15 minutes. Then come out acting like a grizzly bear.\",\n        \"Invite friends over, and make them come in through the window!\",\n        \"Call everyone/thing around you chica\",\n        \"Watch birds fly in the sky and mimic them.\",\n        \"Text random friends, I hid the body...\",\n        \"Sleep\",\n        \"Surf the tv channels!\"\n    ]\n\nexport default things_to_do;","import React, { Component } from 'react';\nimport things_to_do from './items';\nimport './App.css';\nimport SelectTextLoader from 'select-text-loader/dist/SelectTextLoader';\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      things_to_do: things_to_do,\n      selecting: false,\n      randomIndex: -1\n    }\n  }\n\n  showRandom = () => {\n    this.setState({selecting: true});\n    const randomIndex = Math.round(Math.random() * (this.state.things_to_do.length - 0) + 0); \n    this.setState({randomIndex});\n    setTimeout(()=>this.setState({selecting: false}),2000);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a\n            className=\"App-link\"\n            onClick={this.showRandom}\n          >\n            I am bored, Show a random thing to do\n          </a>\n          <p>\n            {!this.state.selecting && this.state.randomIndex!==-1?this.state.things_to_do[this.state.randomIndex]:\"\"}\n            <SelectTextLoader loading={this.state.selecting} data={this.state.things_to_do} timeGap={60}/>\n          </p>\n        </header>\n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}